% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interfaceRandomForest.R
\name{randomForestInterfaces}
\alias{randomForestInterfaces}
\alias{randomForestTrainInterface}
\alias{randomForestTrainInterface,matrix-method}
\alias{randomForestTrainInterface,DataFrame-method}
\alias{randomForestTrainInterface,MultiAssayExperiment-method}
\alias{randomForestPredictInterface}
\alias{randomForestPredictInterface,randomForest,matrix-method}
\alias{randomForestPredictInterface,randomForest,DataFrame-method}
\alias{randomForestPredictInterface,randomForest,MultiAssayExperiment-method}
\title{An Interface for randomForest Package's randomForest Function}
\usage{
\S4method{randomForestTrainInterface}{matrix}(measurementsTrain, classesTrain, ...)

\S4method{randomForestTrainInterface}{DataFrame}(measurementsTrain, classesTrain, ..., verbose = 3)

\S4method{randomForestTrainInterface}{MultiAssayExperiment}(
  measurementsTrain,
  targets = names(measurementsTrain),
  classesTrain,
  ...
)

\S4method{randomForestPredictInterface}{randomForest,matrix}(forest, measurementsTest, ...)

\S4method{randomForestPredictInterface}{randomForest,DataFrame}(
  forest,
  measurementsTest,
  ...,
  returnType = c("both", "class", "score"),
  verbose = 3
)

\S4method{randomForestPredictInterface}{randomForest,MultiAssayExperiment}(
  forest,
  measurementsTest,
  targets = names(measurementsTest),
  ...
)
}
\arguments{
\item{measurementsTrain}{Either a \code{\link{matrix}}, \code{\link{DataFrame}}
or \code{\link{MultiAssayExperiment}} containing the training data.  For a
\code{matrix} or \code{\link{DataFrame}}, the rows are samples, and the columns are features.}

\item{...}{Variables not used by the \code{matrix} nor the
\code{MultiAssayExperiment} method which are passed into and used by the
\code{DataFrame} method (e.g. \code{verbose}) or options which are accepted
by the \code{\link[randomForest]{randomForest}} or
\code{\link[randomForest]{predict.randomForest}} functions.}

\item{classesTrain}{A vector of class labels of class \code{\link{factor}} of the
same length as the number of samples in \code{measurementsTrain} if it is a
\code{\link{matrix}} or a \code{\link{DataFrame}} or a character vector of length 1
containing the column name in \code{measurementsTrain} if it is a \code{\link{DataFrame}} or the
column name in \code{colData(measurementsTrain)} if \code{measurementsTrain} is a
\code{\link{MultiAssayExperiment}}. If a column name, that column will be
removed before training.}

\item{verbose}{Default: 3. A number between 0 and 3 for the amount of
progress messages to give.  This function only prints progress messages if
the value is 3.}

\item{targets}{If \code{measurementsTrain} is a \code{MultiAssayExperiment}, the
names of the data tables to be used. \code{"sampleInfo"} is also a valid value
and specifies that integer variables from the sample information data table will be
used.}

\item{measurementsTest}{An object of the same class as \code{measurementsTrain} with no
samples in common with \code{measurementsTrain} and the same number of features
as it.}

\item{returnType}{Default: \code{"both"}. Either \code{"class"},
\code{"score"} or \code{"both"}.  Sets the return value from the prediction
to either a vector of class labels, score for a sample belonging to the
second class, as determined by the factor levels, or both labels and scores
in a \code{data.frame}.}
}
\value{
For \code{randomForestTrainInterface}, the trained random forest.
For \code{randomForestPredictInterface}, either a factor vector of predicted
classes, a matrix of scores for each class, or a table of both the class
labels and class scores, depending on the setting of \code{returnType}.
}
\description{
A random forest classifier builds multiple decision trees and uses the
predictions of the trees to determine a single prediction for each test
sample.
}
\examples{

  if(require(randomForest))
  {
    # Genes 76 to 100 have differential expression.
    genesMatrix <- sapply(1:100, function(sample) rnorm(25, 9, 0.3))
    genesMatrix <- rbind(genesMatrix, t(sapply(1:25, function(sample)
                                      c(rnorm(75, 9, 0.3), rnorm(25, 14, 0.3)))))
    classes <- factor(rep(c("Poor", "Good"), each = 25))
    rownames(genesMatrix) <- paste("Sample", 1:nrow(genesMatrix))
    colnames(genesMatrix) <- paste("Gene", 1:ncol(genesMatrix))
    trainingSamples <- c(1:20, 26:45)
    testingSamples <- c(21:25, 46:50)
    
    trained <- randomForestTrainInterface(genesMatrix[trainingSamples, ],
                                          classes[trainingSamples])
    predicted <- randomForestPredictInterface(trained, genesMatrix[testingSamples, ])
  }

}
\seealso{
\code{\link{forestFeatures}} for a function to extract the features used
to build the trees.
}
\author{
Dario Strbenac
}
