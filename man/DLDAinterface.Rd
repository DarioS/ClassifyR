% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interfaceDLDA.R
\name{DLDAtrainInterface}
\alias{DLDAtrainInterface}
\alias{DLDAtrainInterface,matrix-method}
\alias{DLDAtrainInterface,DataFrame-method}
\alias{DLDAtrainInterface,MultiAssayExperiment-method}
\alias{DLDApredictInterface}
\alias{DLDApredictInterface,dlda,matrix-method}
\alias{DLDApredictInterface,dlda,DataFrame-method}
\alias{DLDApredictInterface,dlda,MultiAssayExperiment-method}
\title{An Interface for sparsediscrim Package's dlda Function}
\usage{
DLDAtrainInterface(measurementsTrain, ...)

\S4method{DLDAtrainInterface}{matrix}(measurementsTrain, classesTrain, ...)

\S4method{DLDAtrainInterface}{DataFrame}(measurementsTrain, classesTrain, verbose = 3)

\S4method{DLDAtrainInterface}{MultiAssayExperiment}(
  measurementsTrain,
  targets = names(measurementsTrain),
  classesTrain,
  ...
)

DLDApredictInterface(model, measurementsTest, ...)

\S4method{DLDApredictInterface}{dlda,matrix}(model, measurementsTest, ...)

\S4method{DLDApredictInterface}{dlda,DataFrame}(
  model,
  measurementsTest,
  returnType = c("both", "class", "score"),
  verbose = 3
)

\S4method{DLDApredictInterface}{dlda,MultiAssayExperiment}(
  model,
  measurementsTest,
  targets = names(measurementsTest),
  ...
)
}
\arguments{
\item{measurementsTrain}{Either a \code{\link{matrix}}, \code{\link{DataFrame}}
or \code{\link{MultiAssayExperiment}} containing the training data. For a
\code{matrix} or \code{\link{DataFrame}}, the rows are samples, and the columns are features.
If of type \code{\link{DataFrame}} or \code{\link{MultiAssayExperiment}}, the data set is subset
to only those features of type \code{numeric}.}

\item{...}{Variables not used by the \code{matrix} nor the
\code{MultiAssayExperiment} method which are passed into and used by the
\code{DataFrame} method (e.g. \code{verbose}).}

\item{classesTrain}{A vector of class labels of class \code{\link{factor}} of the
same length as the number of samples in \code{measurementsTrain} if it is a
\code{\link{matrix}} or a \code{\link{DataFrame}} or a character vector of length 1
containing the column name in \code{measurementsTrain} if it is a \code{\link{DataFrame}} or the
column name in \code{colData(measurementsTrain)} if \code{measurementsTrain} is a
\code{\link{MultiAssayExperiment}}. If a column name, that column will be
removed before training.}

\item{verbose}{Default: 3. A number between 0 and 3 for the amount of
progress messages to give.  This function only prints progress messages if
the value is 3.}

\item{targets}{If \code{measurements} is a \code{MultiAssayExperiment}, the
names of the data tables to be used. \code{"sampleInfo"} is also a valid value
and specifies that integer variables from the sample information data table will be
used.}

\item{model}{A fitted model as returned by \code{DLDAtrainInterface}.}

\item{measurementsTest}{An object of the same class as \code{measurementsTrain} with no
samples in common with \code{measurementsTrain} and the same number of features
as it. Also, if a \code{DataFrame}, the \code{class} column must be absent.}

\item{returnType}{Default: \code{"both"}. Either \code{"class"},
\code{"score"} or \code{"both"}.  Sets the return value from the prediction
to either a vector of class labels, matrix of scores for each class, or both
labels and scores in a \code{data.frame}.}
}
\value{
For \code{DLDAtrainInterface}, a trained DLDA classifier.  For
\code{DLDApredictInterface}, either a factor vector of predicted classes, a
matrix of scores for each class, or a table of both the class labels and
class scores, depending on the setting of \code{returnType}.
}
\description{
\code{DLDAtrainInterface} generates a trained diagonal LDA classifier and
\code{DLDApredictInterface} uses it to make predictions on a test data set.
}
\examples{

  # if(require(sparsediscrim)) Package currently removed from CRAN.
  #{
    # Genes 76 to 100 have differential expression.
    genesMatrix <- sapply(1:100, function(sample) rnorm(25, 9, 0.3))
    genesMatrix <- rbind(genesMatrix, t(sapply(1:25, function(sample)
                                      c(rnorm(75, 9, 0.3), rnorm(25, 14, 0.3)))))
    classes <- factor(rep(c("Poor", "Good"), each = 25))
    rownames(genesMatrix) <- paste("Sample", 1:nrow(genesMatrix))
    colnames(genesMatrix) <- paste("Gene", 1:ncol(genesMatrix))
    selected <- colnames(genesMatrix)[91:100]
    trainingSamples <- c(1:20, 26:45)
    testingSamples <- c(21:25, 46:50)
    
    classifier <- DLDAtrainInterface(genesMatrix[trainingSamples, selected],
                                     classes[trainingSamples])
    DLDApredictInterface(classifier, genesMatrix[testingSamples, selected])
  #}
  
}
\author{
Dario Strbenac
}
