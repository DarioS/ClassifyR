% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rankingLevene.R
\name{leveneRanking}
\alias{leveneRanking}
\alias{leveneRanking,matrix-method}
\alias{leveneRanking,DataFrame-method}
\alias{leveneRanking,MultiAssayExperiment-method}
\title{Selection of Differential Variability with Levene Statistic}
\arguments{
\item{measurementsTrain}{Either a \code{\link{matrix}}, \code{\link{DataFrame}}
or \code{\link{MultiAssayExperiment}} containing the training data. For a
\code{matrix} or \code{\link{DataFrame}}, the rows are samples, and the columns are features.
If of type \code{\link{DataFrame}} or \code{\link{MultiAssayExperiment}}, the data set is subset
to only those features of type \code{numeric}.}

\item{...}{Variables not used by the \code{matrix} nor the
\code{MultiAssayExperiment} method which are passed into and used by the
\code{DataFrame} method.}

\item{classesTrain}{Either a vector of class labels of class \code{\link{factor}}
of the same length as the number of samples in \code{measurementsTrain} or if the
measurements are of class \code{DataFrame} a character vector of length 1
containing the column name in \code{measurement} is also permitted.}

\item{targets}{If \code{measurementsTrain} is a \code{MultiAssayExperiment}, the
names of the data tables to be used. \code{"sampleInfo"} is also a valid value
and specifies that numeric variables from the sample information table will be
used.}

\item{verbose}{Default: 3. A number between 0 and 3 for the amount of
progress messages to give.  This function only prints progress messages if
the value is 3.}
}
\value{
A vector or data frame (if \code{MultiAssayExperiment} input) of
features, from the most promising features in the first position to the
least promising feature in the last position.
}
\description{
Ranks features by largest Levene statistic.
}
\details{
Levene's statistic for unequal variance between groups is a robust version
of Bartlett's statistic.
}
\examples{

  # First 20 features have bimodal distribution for Poor class.
  # Other 80 features have normal distribution for both classes.
  set.seed(1984)
  genesMatrix <- sapply(1:20, function(feature)
                              {
                                randomMeans <- sample(c(8, 12), 25, replace = TRUE)
                                c(rnorm(25, randomMeans, 1), rnorm(25, 10, 1))
                              }
                       )
  genesMatrix <- cbind(genesMatrix, sapply(1:80, function(feature) rnorm(50, 10, 1)))
  classes <- factor(rep(c("Poor", "Good"), each = 25))
  
  ranked <- leveneRanking(genesMatrix, classes)
  head(ranked)

}
\author{
Dario Strbenac
}
