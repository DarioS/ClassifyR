\name{runTests}
\alias{runTests}
\alias{runTests,matrix-method}
\alias{runTests,ExpressionSet-method}
\title{Reproducibly Run Various Kinds of Cross-Validation}
\description{Enables doing classification schemes such as ordinary 10-fold, 100 resamples 5-fold,
             and leave one out cross-validaion. Processing in parallel is possible by leveraging
             the package \code{\link{BiocParallel}}.
}
\usage{
  \S4method{runTests}{matrix}(expression, classes, ...)
  \S4method{runTests}{ExpressionSet}(expression, datasetName, classificationName,
                     validation = c("bootstrap", "leaveOut", "fold"), bootMode = c("fold", "split"),
                     resamples = 100, percent = 25, folds = 5, leave = 2, seed, parallelParams = bpparam(),
                     params = list(SelectParams(), TrainParams(), PredictParams()),
                     verbose = 1)
}
\arguments{
  \item{expression}{Either a \code{\link{matrix}} or \code{\link{ExpressionSet}} containing
                    the training data. For a matrix, the rows are features, and the columns
                    are samples.}
  \item{classes}{A vector the same length as the number of columns of expression data specifying
                 the class that the samples belong to.}            
  \item{datasetName}{A name associated with the dataset used.}
  \item{classificationName}{A name associated with the classification.}
  \item{validation}{"bootstrap" for repeated resampling. "leaveOut" for leaving all combinations
                    of k samples as test samples. "fold" for folding of the dataset (no resampling).}
  \item{bootMode}{Character. Either "fold" or "split". If "fold", then the samples are split into
                 folds and in each iteration one is used as the test set. If "split", the samples
                 are split into two groups, the sizes being based on the \code{percent} value.
                 One group is used as the training set, the other is the test set.
                 Has no effect if \code{validation} is not "bootstrap".}                    
  \item{resamples}{Relevant when repeated resampling is used. The number of times to do
                   sampling with replacement.}
  \item{percent}{Used when bootstrap resampling with the split method is chosen. The percentage of
                 samples to be in the test set.}           
  \item{folds}{Relevant when repeated resampling is used with \code{bootMode} set to "fold" or when
               \code{validation} is set to "fold". The number of folds to break the dataset into.
               Each fold is used once as the test set.}
  \item{leave}{Relevant when leave k out validation is used. The number of samples to leave
               for testing.}
  \item{seed}{The random number generator used for repeated resampling will use this seed,
              if it is provided. Allows reproducibility of repeated usage on the same input data.}
  \item{parallelParams}{An object of class \code{\link{MulticoreParam}} or \code{\link{SnowParam}}.}               
  \item{params}{A \code{\link{list}} of objects of class of \code{\link{TransformParams}},
               \code{\link{SelectParams}}, \code{\link{TrainParams}}, or \code{\link{PredictParams}}.
               The order they are in the list determines the order in which the stages
               of classification are done in.}
  \item{...}{Unused variables from the \code{\link{matrix}} method passed to the
             \code{\link{ExpressionSet}} method.}
  \item{verbose}{A number between 0 and 3 for the amount of progress messages to give.
                 A higher number will produce more messages.}
}
\value{
  If the predictor function made a single prediction, then an object of class
  \code{\link{ClassifyResult}}. If the predictor function made a set of predictions, then
  a list of such objects.
}
\author{Dario Strbenac}

\examples{
  if(require(curatedOvarianData) && require(sparsediscrim))
  {
    data(TCGA_eset)
    badOutcome <- which(pData(TCGA_eset)[, "vital_status"] == "deceased" & pData(TCGA_eset)[, "days_to_death"] <= 365)
    goodOutcome <- which(pData(TCGA_eset)[, "vital_status"] == "living" & pData(TCGA_eset)[, "days_to_death"] >= 365 * 5)
    TCGA_eset <- TCGA_eset[, c(badOutcome, goodOutcome)]
    classes <- factor(rep(c("Poor", "Good"), c(length(badOutcome), length(goodOutcome))))
    pData(TCGA_eset)[, "class"] <- classes
    
    # Two datasets generated by resampling with replacement, each partitioned into two parts.
    runTests(TCGA_eset, "Ovarian Cancer", "Differential Expression", resamples = 2, fold = 2)
  }
}
