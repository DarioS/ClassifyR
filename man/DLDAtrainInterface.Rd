% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interfaceDLDA.R
\name{DLDAtrainInterface}
\alias{DLDAtrainInterface}
\alias{DLDAtrainInterface,matrix-method}
\alias{DLDAtrainInterface,DataFrame-method}
\alias{DLDAtrainInterface,MultiAssayExperiment-method}
\alias{DLDApredictInterface}
\alias{DLDApredictInterface,dlda,matrix-method}
\alias{DLDApredictInterface,dlda,DataFrame-method}
\alias{DLDApredictInterface,dlda,MultiAssayExperiment-method}
\title{An Interface for sparsediscrim Package's dlda Function}
\usage{
DLDAtrainInterface(measurements, ...)
}
\arguments{
\item{measurements}{Either a \code{\link{matrix}}, \code{\link{DataFrame}}
or \code{\link{MultiAssayExperiment}} containing the training data.  For a
\code{matrix}, the rows are features, and the columns are samples.  If of
type \code{\link{DataFrame}}, the data set is subset to only those features
of type \code{integer}.}

\item{...}{Variables not used by the \code{matrix} nor the
\code{MultiAssayExperiment} method which are passed into and used by the
\code{DataFrame} method (e.g. \code{verbose}).}

\item{classes}{A vector of class labels of class \code{\link{factor}} of the
same length as the number of samples in \code{measurements} if it is a
\code{\link{matrix}} (i.e. number of columns) or a \code{\link{DataFrame}}
(i.e. number of rows) or a character vector of length 1 containing the
column name in \code{measurements} if it is a \code{\link{DataFrame}} or the
column name in \code{colData(measurements)} if \code{measurements} is a
\code{\link{MultiAssayExperiment}}. If a column name, that column will be
removed before training.}

\item{model}{A fitted model as returned by \code{DLDAtrainInterface}.}

\item{test}{An object of the same class as \code{measurements} with no
samples in common with \code{measurements} and the same number of features
as it. Also, if a \code{DataFrame}, the \code{class} column must be absent.}

\item{targets}{If \code{measurements} is a \code{MultiAssayExperiment}, the
names of the data tables to be used. \code{"clinical"} is also a valid value
and specifies that integer variables from the clinical data table will be
used.}

\item{returnType}{Default: \code{"both"}. Either \code{"class"},
\code{"score"} or \code{"both"}.  Sets the return value from the prediction
to either a vector of class labels, matrix of scores for each class, or both
labels and scores in a \code{data.frame}.}

\item{verbose}{Default: 3. A number between 0 and 3 for the amount of
progress messages to give.  This function only prints progress messages if
the value is 3.}
}
\value{
For \code{DLDAtrainInterface}, a trained DLDA classifier.  For
\code{DLDApredictInterface}, either a factor vector of predicted classes, a
matrix of scores for each class, or a table of both the class labels and
class scores, depending on the setting of \code{returnType}.
}
\description{
\code{DLDAtrainInterface} generates a trained diagonal LDA classifier and
\code{DLDApredictInterface} uses it to make predictions on a test data set.
}
\details{
If \code{measurements} is an object of class \code{MultiAssayExperiment},
the factor of sample classes must be stored in the DataFrame accessible by
the \code{colData} function with column name \code{"class"}.
}
\examples{

  # if(require(sparsediscrim)) Package currently removed from CRAN.
  #{
    # Genes 76 to 100 have differential expression.
    genesMatrix <- sapply(1:25, function(sample) c(rnorm(100, 9, 2)))
    genesMatrix <- cbind(genesMatrix, sapply(1:25, function(sample)
                                      c(rnorm(75, 9, 2), rnorm(25, 14, 2))))
    classes <- factor(rep(c("Poor", "Good"), each = 25))
    colnames(genesMatrix) <- paste("Sample", 1:ncol(genesMatrix))
    rownames(genesMatrix) <- paste("Gene", 1:nrow(genesMatrix))
    selected <- rownames(genesMatrix)[91:100]
    trainingSamples <- c(1:20, 26:45)
    testingSamples <- c(21:25, 46:50)
    
    classifier <- DLDAtrainInterface(genesMatrix[selected, trainingSamples],
                                     classes[trainingSamples])
    DLDApredictInterface(classifier, genesMatrix[selected, testingSamples])
  #}
  
}
\author{
Dario Strbenac
}
