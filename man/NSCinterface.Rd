% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interfaceNSC.R
\name{NSCtrainInterface}
\alias{NSCtrainInterface}
\alias{NSCtrainInterface,matrix-method}
\alias{NSCtrainInterface,DataFrame-method}
\alias{NSCtrainInterface,MultiAssayExperiment-method}
\alias{NSCpredictInterface}
\alias{NSCpredictInterface,pamrtrained,matrix-method}
\alias{NSCpredictInterface,pamrtrained,DataFrame-method}
\alias{NSCpredictInterface,pamrtrained,MultiAssayExperiment-method}
\alias{NSCfeatures}
\alias{NSCfeatures,pamrtrained-method}
\title{Interface for \code{pamr.train} Function from \code{pamr} CRAN Package}
\usage{
\S4method{NSCtrainInterface}{matrix}(measurementsTrain, classesTrain, ...)

\S4method{NSCtrainInterface}{DataFrame}(measurementsTrain, classesTrain, ..., verbose = 3)

\S4method{NSCtrainInterface}{MultiAssayExperiment}(
  measurementsTrain,
  targets = names(measurementsTrain),
  classesTrain,
  ...
)

\S4method{NSCpredictInterface}{pamrtrained,DataFrame}(
  model,
  measurementsTest,
  classesColumnTest = NULL,
  ...,
  returnType = c("both", "class", "score"),
  verbose = 3
)

\S4method{NSCpredictInterface}{pamrtrained,MultiAssayExperiment}(
  model,
  measurementsTest,
  targets = names(measurementsTest),
  ...
)

\S4method{NSCfeatures}{pamrtrained}(model, measurementsTrain, classesTrain)
}
\arguments{
\item{measurementsTrain}{A \code{\link{DataFrame}} containing the training data.}

\item{...}{Variables not used by the \code{matrix} nor the
\code{MultiAssayExperiment} method which are passed into and used by the
\code{DataFrame} method or optional settings that are passed to
\code{\link[pamr]{pamr.predict}}.}

\item{classesTrain}{A vector of class labels of class \code{\link{factor}} of the
same length as the number of samples in \code{measurementsTrain}.}

\item{verbose}{Default: 3. A number between 0 and 3 for the amount of
progress messages to give.  This function only prints progress messages if
the value is 3.}

\item{targets}{If \code{measurementsTest} is a \code{MultiAssayExperiment}, the names of
the data tables to be used. \code{"sampleInfo"} is also a valid value and
specifies that numeric variables from the sample information table will be used.}

\item{model}{The output of \code{\link{NSCtrainInterface}}, which is
identical to the output of \code{\link[pamr]{pamr.listgenes}}.}

\item{measurementsTest}{An object of the same class as \code{measurementsTrain} with no
samples in common with \code{measurementsTrain} used in the training stage and
the same number of features as it.  Also, if a \code{DataFrame}, the
\code{classesTrain} column must be absent.}

\item{classesColumnTest}{Either NULL or a character vector of length 1, specifying the
column name to remove from the test set.}

\item{returnType}{Default: \code{"both"}. Either \code{"class"},
\code{"score"} or \code{"both"}.  Sets the return value from the prediction
to either a vector of class labels, score for a sample belonging to the
second class, as determined by the factor levels, or both labels and scores
in a \code{data.frame}.}
}
\value{
A list with elements as described in \code{\link[pamr]{pamr.train}}.

Either a factor vector of predicted classes, a matrix of scores for
each class, or a table of both the class labels and class scores, depending
on the setting of \code{returnType}.

A list with the first element being empty (no feature ranking is
provided) and second element being the selected features' indices.
}
\description{
Restructures variables from ClassifyR framework to be compatible with
\code{\link[pamr]{pamr.train}} definition.

Restructures variables from ClassifyR framework to be compatible with
\code{\link[pamr]{pamr.predict}} definition.

Extracts the threshold for the minimum training error and then extracts the
corresponding gene IDs of the genes that were not eliminated by the
thresold.
}
\details{
This function is an interface between the ClassifyR framework and
\code{\link[pamr]{pamr.train}}.

This function is an interface between the ClassifyR framework and
\code{\link[pamr]{pamr.predict}}.  It selects the highest threshold that
gives the minimum error rate in the training data.

When used within ClassifyR cross-validation, the trained model, measurements
and classes will automatically be passed to this function in each iteration.
}
\examples{

  if(require(pamr))
  {
    # Samples in one class with differential expression to other class for last 25 features.
    genesMatrix <- sapply(1:100, function(sampleColumn) c(rnorm(25, 9, 1)))
    genesMatrix <- rbind(genesMatrix, cbind(sapply(1:50, function(sampleColumn) rnorm(25, 9, 1)),
                                            sapply(1:50, function(sampleColumn) rnorm(25, 14, 1))))
    classes <- factor(rep(c("Poor", "Good"), each = 25))
    
    NSCtrainInterface(genesMatrix, classes)
  }


  if(require(pamr))
  {
    # Samples in one class with differential expression to other class for last 25 features.
    genesMatrix <- sapply(1:100, function(sampleColumn) c(rnorm(25, 9, 1)))
    genesMatrix <- rbind(genesMatrix, cbind(sapply(1:50, function(sampleColumn) rnorm(25, 9, 1)),
                                            sapply(1:50, function(sampleColumn) rnorm(25, 14, 1))))
    classes <- factor(rep(c("Poor", "Good"), each = 25))
    
    fit <- NSCtrainInterface(genesMatrix[c(1:20, 26:45), ], classes[c(1:20, 26:45)])
    NSCpredictInterface(fit, genesMatrix[c(21:25, 46:50), ])
  }


  if(require(pamr))
  {
    # Genes 76 to 100 have differential expression.
    genesMatrix <- sapply(1:100, function(sample) rnorm(25, 9, 0.3))
    genesMatrix <- rbind(genesMatrix, t(sapply(1:25, function(sample)
                                      c(rnorm(75, 9, 0.3), rnorm(25, 14, 0.3)))))
    classes <- factor(rep(c("Poor", "Good"), each = 25))
    rownames(genesMatrix) <- paste("Sample", 1:nrow(genesMatrix))
    colnames(genesMatrix) <- paste("Gene", 1:ncol(genesMatrix))
    
    model <- NSCtrainInterface(genesMatrix, classes)
    selected <- NSCfeatures(model, genesMatrix, classes)
    selected[[2]]                                                       
  }

}
\seealso{
\code{\link[pamr]{pamr.train}} for the function that was interfaced
to.

\code{\link[pamr]{pamr.predict}} for the function that was
interfaced to.

\code{\link[pamr]{pamr.listgenes}} for the function that is
interfaced to.
}
\author{
Dario Strbenac
}
